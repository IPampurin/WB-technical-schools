/* ВАРИАНТ №1 - решение задачи l2.3 */

/*
Интерфейс в Go — это специальный тип, который определяет набор методов, но не содержит их реализацию.
Значение интерфейса можно рассматривать как пару: тип значения (type) и само значение (value).
Поэтому пустой интерфейс == nil (zero value) когда и тип и значение не установлены, а интерфейс,
который объявили и присвоили ему какое-то значение (value) (пусть даже и nil), != nil так как его
поле с указанием на тип (type) будет хранить указатель на тот тип, которому его приравнивали.
*/

package main

import (
	"fmt"
	"os"
)

// Foo возвращает переменную типа error
func Foo() error {

	// объявляем переменную типа *os.PathError (type) значение которой == nil (value)
	var err *os.PathError = nil
	// при возврате err упаковывается в интерфейс error где type == *os.PathError, а value == nil
	return err
}

func main() {

	err := Foo()
	fmt.Println(err)        // вывод: <nil>	// выводим значение (value) интерфейса
	fmt.Println(err == nil) // вывод: false	// сравниваем с nil интерфейс, у которого type != nil

	// становится немного понятнее, если добавить такой вывод
	fmt.Printf("тип err == %T,\nзначение err == %v\n", err, err) // тип err == *fs.PathError, значение err == <nil>
}
