/* ВАРИАНТ №1 - решение задачи l1.21 с краткой теоретической частью */

/*
Паттерн адаптер (adapter) — это структурный паттерн, который позволяет объектам с несовместимыми интерфейсами работать вместе.
Адаптер выступает прослойкой между двумя объектами, превращая интерфейс одного в интерфейс, понятный другому.

В Go паттерн адаптер используется для того, чтобы адаптировать интерфейсы с различной сигнатурой для работы
с ними в рамках одного контекста. В Go паттерн адаптер, как правило, применяется для того, чтобы объединить интерфейсы
с несовместимыми методами, предоставив общий интерфейс для работы с ними.

Плюсы использования адаптера:
1. Инкапсуляция несовместимости: Вы можете работать с несовместимыми интерфейсами без необходимости их модификации.
2. Гибкость и расширяемость: Легко добавлять новые адаптируемые классы без изменения существующего кода.
3. Меньше изменений в коде: Вместо того, чтобы переписывать весь код для совместимости, вы просто создаете адаптер,
   что значительно сокращает время и усилия на изменение системы.

Паттерн адаптер применим в следующих ситуациях:
1. Интеграция сторонних библиотек: Когда вы хотите использовать сторонние библиотеки или API, но их интерфейсы несовместимы
   с вашим приложением, вы можете использовать адаптер для преобразования их интерфейсов.
2. Устаревшие системы: Если ваша система работает с устаревшими или устаревшими интерфейсами, паттерн адаптер поможет
   интегрировать эти компоненты в современную архитектуру без необходимости переписывать код.
3. Гибкость и расширяемость: Паттерн адаптер позволяет добавлять новые компоненты и взаимодействовать с ними, не изменяя
   существующую кодовую базу.

Минусы использования адаптера:
1. Усложнение архитектуры.
2. Снижение производительности (накладные расходы на ещё один слой абстракций).
3. Сложность отладки и понимания потока выполнения.
4. Нарушение принципа единственной ответственности.

Когда НЕ стоит использовать адаптер:
1. Если можно изменить исходный код - лучше рефакторить.
2. Для простых случаев - иногда проще изменить клиентский код.
3. Когда семантика операций сильно различается (разные единицы измерения, разное поведение при ошибках и т.д.).
4. В высокопроизводительных системах - где важна каждая миллисекунда.

Реальные примеры использования:

Пример:

Представим ситуацию: у нас есть старый код, который работает с некоторым типом данных, и мы хотим использовать новый код,
который имеет другой интерфейс, но делает похожую работу.
Вместо переписывания старого кода или нового, мы можем написать адаптер, который преобразует интерфейс старого кода в интерфейс,
ожидаемый новым кодом (или наоборот).

Вот код, иллюстрирующий этот пример:
*/

package main

import "fmt"

// OldSystem - тип, адаптацию которого необходимо произвести (старая система: как устроена - не знаем)
type OldSystem struct{}

// LegacyOperation - специфический метод старой системы с несовместимым интерфейсом
// (знаем, что он есть и понимаем что у него на выходе, но как устроен - не знаем)
func (o *OldSystem) LegacyOperation() string {
	return "Данные из старой системы"
}

// OldSystemAdapter - адаптер для OldSystem, посредством которого преобразуем интерфейс OldSystem в интерфейс Target.
// Используем композицию для делегирования вызовов к старой системе
type OldSystemAdapter struct {
	oldSystem *OldSystem
}

// Target - целевой интерфейс, который ожидает клиент
type Target interface {
	Request() string
}

// Request - реализация целевого интерфейса, которая адаптирует вызов к старой системе
func (a *OldSystemAdapter) Request() string {
	// адаптация: преобразуем вызов нового интерфейса к старому
	legacyResult := a.oldSystem.LegacyOperation()
	return "Адаптировано: " + legacyResult
}

// clientCode клиент, который работает только с Target
func clientCode(target Target) {
	fmt.Println(target.Request())
}

func main() {

	// экземпляр адаптируемого объекта
	oldSystem := &OldSystem{}

	// экземпляр адаптера
	adapter := &OldSystemAdapter{oldSystem: oldSystem}

	// клиент работает через адаптер, не зная о существовании OldSystem
	clientCode(adapter) // вывод: "Адаптировано: Данные из старой системы"
}
